{"version":3,"sources":["serviceWorker.js","CloudflareStream.tsx","index.js"],"names":["Boolean","window","location","hostname","match","CloudflareStream","useState","muted","setMuted","startTime","setStartTime","src","setSrc","errorMessage","setErrorMessage","streamRef","useRef","console","log","document","search","query","URLSearchParams","parseInt","get","useEffect","current","classList","add","startTimestamp","Math","floor","Date","now","err","error","className","onClick","autoplay","controls","currentTime","preload","onPause","play","ReactDOM","render","StrictMode","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","message"],"mappings":"2OAYoBA,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,kBCiCSC,G,MA/CU,WAAO,IAAD,EACHC,oBAAS,GADN,mBACtBC,EADsB,KACfC,EADe,OAEKF,mBAAS,GAFd,mBAEtBG,EAFsB,KAEXC,EAFW,OAGPJ,mBAAS,IAHF,mBAGtBK,EAHsB,KAGjBC,EAHiB,OAIWN,mBAAS,IAJpB,mBAItBO,EAJsB,KAIRC,EAJQ,KAKvBC,EAAYC,iBAA0B,MAC5CC,QAAQC,IAAIC,SAASjB,SAASkB,QAE9B,IAAMC,EAAQ,IAAIC,gBAAgBH,SAASjB,SAASkB,QAqBpD,OApBAH,QAAQC,IAAIG,GAEZJ,QAAQC,IAAIK,SAASF,EAAMG,IAAI,mBAAqB,MAGpDC,qBAAU,WAAO,IAAD,EACd,UAAAV,EAAUW,eAAV,SAAmBC,UAAUC,IAAI,UAEjC,IACE,IAAMC,EAAyBN,SAASF,EAAMG,IAAI,mBAAqB,KACvEP,QAAQC,IAAI,iBAAkBY,KAAKC,MAAMC,KAAKC,MAAQ,KAAQJ,GAE9DnB,EAAaoB,KAAKC,MAAMC,KAAKC,MAAQ,KAAQJ,GAC7CjB,EAAOS,EAAMG,IAAI,QAAU,IAC3B,MAAOU,GACPpB,EAAgB,wBAChBG,QAAQkB,MAAMD,MAEf,CAACnB,EAAWL,EAAcW,IAEJ,KAAjBR,EACN,oCACGN,GAAS,4BAAQ6B,UAAU,gBAAgBC,QAAS,kBAAM7B,GAAS,KAA1D,iBACV,kBAAC,IAAD,CACE8B,UAAQ,EACRC,UAAQ,EACRhC,MAAOA,EACPiC,YAAa/B,EACbgC,QAAQ,OACR9B,IAAKA,EACLI,UAAWA,EACX2B,QAAS,kBAAM3B,EAAUW,QAAQiB,WAGnC,2BAAI9B,KCzCV+B,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEF3B,SAAS4B,eAAe,SFyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAnB,GACLlB,QAAQkB,MAAMA,EAAMoB,c","file":"static/js/main.e3295a33.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React, { useState, useEffect, useRef, MutableRefObject } from 'react';\nimport { Stream, HTMLStreamElement } from '@cloudflare/stream-react';\nimport './CloudflareStream.css';\n\nconst CloudflareStream = () => {\n  const [muted, setMuted] = useState(true);\n  const [startTime, setStartTime] = useState(0);\n  const [src, setSrc] = useState('');\n  const [errorMessage, setErrorMessage] = useState('');\n  const streamRef = useRef<HTMLStreamElement>(null) as MutableRefObject<HTMLStreamElement>;\n  console.log(document.location.search);\n  \n  const query = new URLSearchParams(document.location.search);\n  console.log(query);\n  \n  console.log(parseInt(query.get('startTimestamp') || '0'));\n  \n\n  useEffect(() => {\n    streamRef.current?.classList.add('stream');\n    \n    try {\n      const startTimestamp: number = parseInt(query.get('startTimestamp') || '0');\n      console.log('start time is ', Math.floor(Date.now() / 1000) - startTimestamp);\n      \n      setStartTime(Math.floor(Date.now() / 1000) - startTimestamp);\n      setSrc(query.get('src') || '');\n    } catch (err) {\n      setErrorMessage('something went wrong');\n      console.error(err);\n    }\n  }, [streamRef, setStartTime, query]);\n\n  return (errorMessage === '' ?\n    <>\n      {muted && <button className=\"unmute-button\" onClick={() => setMuted(false)}>tap to unmute</button>}\n      <Stream\n        autoplay\n        controls\n        muted={muted}\n        currentTime={startTime}\n        preload=\"auto\" \n        src={src}\n        streamRef={streamRef}\n        onPause={() => streamRef.current.play()}\n      />\n    </>\n    : <p>{errorMessage}</p>\n  );\n};\n\nexport default CloudflareStream;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport * as serviceWorker from './serviceWorker';\nimport CloudflareStream from './CloudflareStream';\n\nReactDOM.render(\n  <React.StrictMode>\n    <CloudflareStream />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}