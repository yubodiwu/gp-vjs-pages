{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["VideoPlayer","props","queryParams","URLSearchParams","window","location","search","sources","src","get","startTimestamp","state","startTime","has","this","player","videojs","videoNode","muted","console","log","setTimeout","play","currentTime","Math","floor","Date","now","dispose","data-vjs-player","ref","node","className","React","Component","App","autoplay","controls","Boolean","hostname","match","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"mTAKMA,G,8DACJ,WAAYC,GAAQ,IAAD,sBACjB,cAAMA,GAEN,IAAMC,EAAc,IAAIC,gBAAgBC,OAAOC,SAASC,QAClDC,EAAU,CAAC,CAAEC,IAAI,6BAAD,OAA+BN,EAAYO,IAAI,OAA/C,0BAChBC,EAAiBR,EAAYO,IAAI,mBAAqB,EAL3C,OAOjB,EAAKE,MAAQ,CACXH,IAAK,GACLI,UAAW,EACXL,QAASL,EAAYW,IAAI,OAASN,EAAU,KAC5CG,kBAXe,E,gEAeE,IAAD,OAElBI,KAAKC,OAASC,YAAQF,KAAKG,UAAN,YAAC,eAAqBH,KAAKb,OAA3B,IAAkCM,QAASO,KAAKH,MAAMJ,QAASW,OAAO,KAAQ,WACjGC,QAAQC,IAAI,gBAAiBN,SAE/BO,YAAW,kBAAM,EAAKN,OAAOO,SAAQ,KACrCR,KAAKC,OAAOQ,YAAYC,KAAKC,MAAMC,KAAKC,MAAQ,KAAQb,KAAKH,MAAMD,kB,6CAK/DI,KAAKC,QACPD,KAAKC,OAAOa,Y,+BAON,IAAD,OACP,OACE,6BACE,yBAAKC,mBAAA,GACH,2BACEC,IAAK,SAACC,GAAD,OAAW,EAAKd,UAAYc,GACjCC,UAAU,2C,GAzCIC,IAAMC,YAqDjBC,MAJf,WACE,OAAO,kBAAC,EAAD,CAAaC,UAAQ,EAACC,UAAQ,KC3CnBC,QACW,cAA7BlC,OAAOC,SAASkC,UAEe,UAA7BnC,OAAOC,SAASkC,UAEhBnC,OAAOC,SAASkC,SAASC,MACvB,2DCXNC,iBACE,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDwHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLjC,QAAQiC,MAAMA,EAAMC,c","file":"static/js/main.e72d16a8.chunk.js","sourcesContent":["import React, { useEffect } from \"react\";\nimport videojs from \"video.js\";\nimport \"video.js/dist/video-js.css\";\nimport \"./App.css\";\n\nclass VideoPlayer extends React.Component {\n  constructor(props) {\n    super(props);\n\n    const queryParams = new URLSearchParams(window.location.search);\n    const sources = [{ src: `https://videodelivery.net/${queryParams.get('src')}/manifest/video.m3u8` }];\n    const startTimestamp = queryParams.get('startTimestamp') || 0;\n\n    this.state = {\n      src: '',\n      startTime: 0,\n      sources: queryParams.has('src') ? sources : null,\n      startTimestamp,\n    };\n  }\n\n  componentDidMount() {\n    // instantiate Video.js\n    this.player = videojs(this.videoNode, { ...this.props, sources: this.state.sources, muted: true }, function onPlayerReady() {\n      console.log(\"onPlayerReady\", this);\n    });\n    setTimeout(() => this.player.play(), 1000);\n    this.player.currentTime(Math.floor(Date.now() / 1000) - this.state.startTimestamp);\n  }\n\n  // destroy player on unmount\n  componentWillUnmount() {\n    if (this.player) {\n      this.player.dispose();\n    }\n  }\n\n  // wrap the player in a div with a `data-vjs-player` attribute\n  // so videojs won't create additional wrapper in the DOM\n  // see https://github.com/videojs/video.js/pull/3856\n  render() {\n    return (\n      <div>\n        <div data-vjs-player>\n          <video\n            ref={(node) => (this.videoNode = node)}\n            className=\"video-js vjs-theme-city vjs-16-9\"\n          ></video>\n        </div>\n      </div>\n    );\n  }\n}\n\nfunction App() {\n  return <VideoPlayer autoplay controls />;\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { render } from 'react-snapshot';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nrender(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}