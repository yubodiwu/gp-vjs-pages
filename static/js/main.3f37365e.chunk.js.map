{"version":3,"sources":["pages/CloudflareStream.tsx","pages/Admin.tsx","App.js","serviceWorker.js","index.js","pages/Admin.module.css"],"names":["CloudflareStream","useState","muted","setMuted","startTime","setStartTime","src","setSrc","errorMessage","setErrorMessage","streamRef","useRef","query","URLSearchParams","useLocation","search","useEffect","current","classList","add","startTimestamp","parseInt","get","Math","floor","Date","now","err","console","error","className","onClick","autoplay","controls","currentTime","preload","onPause","play","submitForm","values","a","Admin","serviceName","startDateTime","password","setValues","changeFormValueOf","prop","event","target","value","FormGroup","styles","adminForm","FormControl","InputLabel","htmlFor","Select","id","onChange","MenuItem","adminFormControl","Input","utils","DateFnsUtils","DateTimePicker","autoOk","ampm","label","type","Button","color","App","path","Boolean","window","location","hostname","match","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","message","module","exports"],"mappings":"gPA4CeA,EAvCU,WAAO,IAAD,EACHC,oBAAS,GADN,mBACtBC,EADsB,KACfC,EADe,OAEKF,mBAAS,GAFd,mBAEtBG,EAFsB,KAEXC,EAFW,OAGPJ,mBAAS,IAHF,mBAGtBK,EAHsB,KAGjBC,EAHiB,OAIWN,mBAAS,IAJpB,mBAItBO,EAJsB,KAIRC,EAJQ,KAKvBC,EAAYC,iBAA0B,MACtCC,EAAQ,IAAIC,gBAAgBC,cAAcC,QAehD,OAbAC,qBAAU,WAAO,IAAD,EACd,UAAAN,EAAUO,eAAV,SAAmBC,UAAUC,IAAI,UAEjC,IACE,IAAMC,EAAyBC,SAAST,EAAMU,IAAI,mBAAqB,KACvEjB,EAAakB,KAAKC,MAAMC,KAAKC,MAAQ,KAAQN,GAC7Cb,EAAOK,EAAMU,IAAI,QAAU,IAC3B,MAAOK,GACPlB,EAAgB,wBAChBmB,QAAQC,MAAMF,MAEf,CAACjB,EAAWL,EAAcO,IAEJ,KAAjBJ,EACN,oCACGN,GAAS,4BAAQ4B,UAAU,gBAAgBC,QAAS,kBAAM5B,GAAS,KAA1D,iBACV,kBAAC,IAAD,CACE6B,UAAQ,EACRC,UAAQ,EACR/B,MAAOA,EACPgC,YAAa9B,EACb+B,QAAQ,OACR7B,IAAKA,EACLI,UAAWA,EACX0B,QAAS,kBAAM1B,EAAUO,QAAQoB,WAGnC,2BAAI7B,I,kJCjCJ8B,EAAU,uCAAG,WAAOC,GAAP,SAAAC,EAAA,0FAAH,sDA8FDC,EA/DD,WAAO,IAAD,EACUxC,mBAAqB,CAC/CyC,YAAa,WACbpC,IAAK,GACLqC,cAAe,KACfC,SAAU,KALM,mBACXL,EADW,KACHM,EADG,KAOZC,EAAoB,SAACC,GAAD,OACxB,SAACC,GAAD,OACEH,EAAU,2BAAKN,GAAN,kBAAeQ,EAAOC,EAAMC,OAAOC,WAEhD,OACE,kBAACC,EAAA,EAAD,CAAWrB,UAAWsB,IAAOC,WAC3B,kBAACC,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,CAAYC,QAAQ,gBAApB,gBACA,kBAACC,EAAA,EAAD,CACEC,GAAG,eACHR,MAAOX,EAAOG,YACdiB,SAAUb,EAAkB,gBAE5B,kBAACc,EAAA,EAAD,CAAUV,MAAM,YAAhB,YACA,kBAACU,EAAA,EAAD,CAAUV,MAAM,QAAhB,UAGJ,kBAACI,EAAA,EAAD,CAAaxB,UAAWsB,IAAOS,kBAC7B,kBAACN,EAAA,EAAD,CAAYC,QAAQ,kBAApB,qBACA,kBAACM,EAAA,EAAD,CAAOJ,GAAG,iBAAiBC,SAAUb,EAAkB,OAAQI,MAAOX,EAAOjC,OAE/E,kBAAC,IAAD,CAAyByD,MAAOC,KAC9B,kBAACC,EAAA,EAAD,CACEC,QAAM,EACNC,MAAI,EACJR,SAAU,SAAAX,GACRH,EAAU,2BAAKN,GAAN,IAAcI,cAAeK,MAExCoB,MAAM,qBACNlB,MAAOX,EAAOI,iBAGlB,kBAACW,EAAA,EAAD,CAAaxB,UAAWsB,IAAOS,kBAC7B,kBAACN,EAAA,EAAD,CAAYC,QAAQ,YAApB,kBACA,kBAACM,EAAA,EAAD,CACEJ,GAAG,WACHC,SAAUb,EAAkB,YAC5BuB,KAAK,WACLnB,MAAOX,EAAOK,YAGlB,kBAAC0B,EAAA,EAAD,CAAQC,MAAM,UAAUxC,QAAO,sBAAE,sBAAAS,EAAA,sEACzBF,EAAWC,GADc,OAE/BM,EAAU,CACRH,YAAa,WACbpC,IAAK,GACLqC,cAAe,KACfC,SAAU,KANmB,4CAAjC,Y,OC/DS4B,MAjBf,WACE,OACE,yBAAK1C,UAAU,OACb,kBAAC,IAAD,KACE,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAO2C,KAAK,WACV,kBAAC,EAAD,OAEF,kBAAC,IAAD,CAAOA,KAAK,UACV,kBAAC,EAAD,WCHQC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCXNC,iBACE,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDwHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAA5D,GACLD,QAAQC,MAAMA,EAAM6D,a,mBExI5BC,EAAOC,QAAU,CAAC,UAAY,yBAAyB,iBAAmB,kC","file":"static/js/main.3f37365e.chunk.js","sourcesContent":["import React, { useState, useEffect, useRef, MutableRefObject } from 'react';\nimport { Stream, HTMLStreamElement } from '@cloudflare/stream-react';\nimport { Button } from '@material-ui/core';\nimport { useLocation } from 'react-router-dom';\n\nconst CloudflareStream = () => {\n  const [muted, setMuted] = useState(true);\n  const [startTime, setStartTime] = useState(0);\n  const [src, setSrc] = useState('');\n  const [errorMessage, setErrorMessage] = useState('');\n  const streamRef = useRef<HTMLStreamElement>(null) as MutableRefObject<HTMLStreamElement>;\n  const query = new URLSearchParams(useLocation().search);\n\n  useEffect(() => {\n    streamRef.current?.classList.add('stream');\n    \n    try {\n      const startTimestamp: number = parseInt(query.get('startTimestamp') || '0');\n      setStartTime(Math.floor(Date.now() / 1000) - startTimestamp);\n      setSrc(query.get('src') || '');\n    } catch (err) {\n      setErrorMessage('something went wrong');\n      console.error(err);\n    }\n  }, [streamRef, setStartTime, query]);\n\n  return (errorMessage === '' ?\n    <>\n      {muted && <button className=\"unmute-button\" onClick={() => setMuted(false)}>tap to unmute</button>}\n      <Stream\n        autoplay\n        controls\n        muted={muted}\n        currentTime={startTime}\n        preload=\"auto\" \n        src={src}\n        streamRef={streamRef}\n        onPause={() => streamRef.current.play()}\n      />\n    </>\n    : <p>{errorMessage}</p>\n  );\n};\n\nexport default CloudflareStream;\n","import React, { useState, ChangeEvent } from 'react';\nimport { Button, FormGroup, FormControl, Input, InputLabel, Select, MenuItem } from '@material-ui/core';\nimport { DateTimePicker, MuiPickersUtilsProvider } from '@material-ui/pickers';\nimport DateFnsUtils from '@date-io/date-fns';\n\nimport styles from './Admin.module.css';\n\nconst submitForm = async (values: FormValues) => {\n  // try {\n  //   const postBody = {\n  //     ...values,\n  //     startTimestamp: values.startDateTime && Math.round(values.startDateTime.getTime() / 1000),\n  //   };\n  //   const response = await fetch('/admin', {\n  //     method: 'POST',\n  //     headers: { 'Content-Type': 'application/json' },\n  //     body: JSON.stringify(postBody),\n  //   });\n  //   const responseJson = await response.json();\n    \n  //   if (response.status === 401) {\n  //     alert('Incorrect password, try again');\n  //   }\n  //   if (response.status === 200) {\n  //     alert(`Successfully saved ${values.serviceName} service with start time ${values.startDateTime} and src ${values.src}`);\n  //   }\n  // } catch (err) {\n  //   console.error(err);\n  // }\n};\n\ninterface FormValues {\n  serviceName: 'mandarin' | 'asia';\n  src: string;\n  startDateTime: Date | null;\n  password: string;\n}\n\nconst Admin = () => {\n  const [values, setValues] = useState<FormValues>({\n    serviceName: 'mandarin',\n    src: '',\n    startDateTime: null,\n    password: '',\n  });\n  const changeFormValueOf = (prop: string) =>\n    (event: ChangeEvent<HTMLInputElement | HTMLTextAreaElement | { value: unknown }>) =>\n      setValues({ ...values, [prop]: event.target.value });\n\n  return (\n    <FormGroup className={styles.adminForm}>\n      <FormControl>\n        <InputLabel htmlFor=\"service-name\">Service Name</InputLabel>\n        <Select\n          id=\"service-name\"\n          value={values.serviceName}\n          onChange={changeFormValueOf('serviceName')}\n        >\n          <MenuItem value=\"mandarin\">Mandarin</MenuItem>\n          <MenuItem value=\"asia\">Asia</MenuItem>\n        </Select>\n      </FormControl>\n      <FormControl className={styles.adminFormControl}>\n        <InputLabel htmlFor=\"cloudflare-src\">Cloudflare Source</InputLabel>\n        <Input id=\"cloudflare-src\" onChange={changeFormValueOf('src')} value={values.src} />\n      </FormControl>\n      <MuiPickersUtilsProvider utils={DateFnsUtils}>\n        <DateTimePicker\n          autoOk\n          ampm\n          onChange={event => {\n            setValues({ ...values, startDateTime: event });\n          }}\n          label=\"Service Start Time\"\n          value={values.startDateTime}\n        />\n      </MuiPickersUtilsProvider>\n      <FormControl className={styles.adminFormControl}>\n        <InputLabel htmlFor=\"password\">Admin Password</InputLabel>\n        <Input\n          id=\"password\"\n          onChange={changeFormValueOf('password')}\n          type=\"password\"\n          value={values.password}\n        />\n      </FormControl>\n      <Button color=\"primary\" onClick={async () => {\n        await submitForm(values);\n        setValues({\n          serviceName: 'mandarin',\n          src: '',\n          startDateTime: null,\n          password: '',\n        });\n      }}>\n        Submit\n      </Button>\n    </FormGroup>\n  );\n};\n\nexport default Admin;\n","import React from 'react';\nimport { BrowserRouter, Switch, Route } from 'react-router-dom';\nimport CloudflareStream from './pages/CloudflareStream';\nimport Admin from './pages/Admin';\nimport './App.css';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <BrowserRouter>\n        <Switch>\n          <Route path=\"/stream\">\n            <CloudflareStream />\n          </Route>\n          <Route path=\"/admin\">\n            <Admin />\n          </Route>\n        </Switch>\n      </BrowserRouter>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { render } from 'react-snapshot';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nrender(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"adminForm\":\"Admin_adminForm__2JddF\",\"adminFormControl\":\"Admin_adminFormControl__1eJ1z\"};"],"sourceRoot":""}